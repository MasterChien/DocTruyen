// <auto-generated />
using System;
using DocTruyen.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DocTruyen.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DocTruyen.DataAccess.Models.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "69961b11-5bad-43f3-8a4c-d489a831b874",
                            Description = "Administrator role",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "c93d1a14-6bb8-4583-93ba-755f57807579",
                            Description = "user role",
                            Name = "user",
                            NormalizedName = "user"
                        });
                });

            modelBuilder.Entity("DocTruyen.DataAccess.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImgURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicImgId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "532b5f2f-4d3f-4009-a6ec-5c23202d3e84",
                            Dob = new DateTime(2020, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "masterchienboy@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Chien",
                            LastName = "Hoang Van",
                            LockoutEnabled = false,
                            NormalizedEmail = "masterchienboy@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEMCGJ95gvRThsp0hPQZYbY4VUDJLxCpdiPef04nB3gQuunbyUjoCUVXvQtjT0b5uww==",
                            PhoneNumberConfirmed = false,
                            ProfileImgURL = "https://i.imgur.com/stD0Q19.jpg",
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b579f32-4191-4734-a427-a6de81ccab57",
                            Dob = new DateTime(2020, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Chien",
                            LastName = "Hoang Van",
                            LockoutEnabled = false,
                            NormalizedEmail = "user1@gmail.com",
                            NormalizedUserName = "user1",
                            PasswordHash = "AQAAAAEAACcQAAAAEM7dpTrFdv8Y16ILgT+ZojSsqTOXzn7mxbWQHYVMWXel4uS7jniJJEJFdr/o9kGCfA==",
                            PhoneNumberConfirmed = false,
                            ProfileImgURL = "https://i.imgur.com/stD0Q19.jpg",
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a06886ac-5da5-419e-997f-a8b9aca14213",
                            Dob = new DateTime(2020, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Chien",
                            LastName = "Hoang Van",
                            LockoutEnabled = false,
                            NormalizedEmail = "user2@gmail.com",
                            NormalizedUserName = "user2",
                            PasswordHash = "AQAAAAEAACcQAAAAEAmSPk7udPYK49UnbH16+6Ub58+3ltT9R98w2lBLAoODb7A5H79PFpMzZ01BJla+vw==",
                            PhoneNumberConfirmed = false,
                            ProfileImgURL = "https://i.imgur.com/xELPaag.jpg",
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        });
                });

            modelBuilder.Entity("DocTruyen.DataAccess.Models.AppUseRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("DocTruyen.DataAccess.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Đây là tác giả cấp Đại thần",
                            Name = "Ta la Lão Ngũ",
                            ProfileImgUrl = "https://nae.vn/ttv/ttv/public/images_user/10a1c6c931075aba32b7d7bfc986288037785186fce122f2c18a26a9d1c10ff6.jpg"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Đây là tác giả cấp Đại thần",
                            Name = "Thần Đông",
                            ProfileImgUrl = "https://nae.vn/ttv/ttv/public/images_user/10a1c6c931075aba32b7d7bfc986288037785186fce122f2c18a26a9d1c10ff6.jpg"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Đây là tác giả cấp Đại thần",
                            Name = "Ngã Cật Tây Hồng Thị",
                            ProfileImgUrl = "https://nae.vn/ttv/ttv/public/images_user/10a1c6c931075aba32b7d7bfc986288037785186fce122f2c18a26a9d1c10ff6.jpg"
                        });
                });

            modelBuilder.Entity("DocTruyen.DataAccess.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "thể loại có bối cảnh tại đô thị hiện đại",
                            Name = "Đô thị"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Thể loại tu tiên",
                            Name = "Tiên hiệp"
                        });
                });

            modelBuilder.Entity("DocTruyen.DataAccess.Models.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<int>("NovelId")
                        .HasColumnType("int");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NovelId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Chapters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Đây là nội dung chương 1",
                            CreatedDate = new DateTime(2022, 6, 4, 20, 23, 9, 282, DateTimeKind.Local).AddTicks(7386),
                            Index = 1,
                            NovelId = 1,
                            PublisherId = 2,
                            Title = "Mở đầu"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Đây là nội dung chương 2",
                            CreatedDate = new DateTime(2022, 6, 4, 20, 23, 9, 282, DateTimeKind.Local).AddTicks(7389),
                            Index = 2,
                            NovelId = 1,
                            PublisherId = 2,
                            Title = "Bắt đầu mới"
                        },
                        new
                        {
                            Id = 3,
                            Content = "Đây là nội dung chương 3",
                            CreatedDate = new DateTime(2022, 6, 4, 20, 23, 9, 282, DateTimeKind.Local).AddTicks(7391),
                            Index = 3,
                            NovelId = 1,
                            PublisherId = 2,
                            Title = "Tu luyện"
                        },
                        new
                        {
                            Id = 4,
                            Content = "Đây là nội dung chương 1 truyện Già Thiên",
                            CreatedDate = new DateTime(2022, 6, 4, 20, 23, 9, 282, DateTimeKind.Local).AddTicks(7392),
                            Index = 1,
                            NovelId = 2,
                            PublisherId = 3,
                            Title = "Mở đầu"
                        });
                });

            modelBuilder.Entity("DocTruyen.DataAccess.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NovelId")
                        .HasColumnType("int");

                    b.Property<int?>("ParrentId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("NovelId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 6, 4, 20, 23, 9, 282, DateTimeKind.Local).AddTicks(7415),
                            NovelId = 1,
                            Text = "Truyện rất hay",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 6, 4, 20, 23, 9, 282, DateTimeKind.Local).AddTicks(7418),
                            NovelId = 1,
                            Text = "Truyện rất hay",
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 6, 4, 20, 23, 9, 282, DateTimeKind.Local).AddTicks(7419),
                            NovelId = 2,
                            Text = "Truyện như lone",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2022, 6, 4, 20, 23, 9, 282, DateTimeKind.Local).AddTicks(7422),
                            NovelId = 1,
                            ParrentId = 1,
                            Text = "Đồng quan điểm",
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2022, 6, 4, 20, 23, 9, 282, DateTimeKind.Local).AddTicks(7423),
                            NovelId = 1,
                            ParrentId = 1,
                            Text = "Bạc quan điểm",
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2022, 6, 4, 20, 23, 9, 282, DateTimeKind.Local).AddTicks(7425),
                            NovelId = 1,
                            ParrentId = 3,
                            Text = "Vô học",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("DocTruyen.DataAccess.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileSize")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NovelId")
                        .HasColumnType("int");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NovelId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("DocTruyen.DataAccess.Models.Novel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PublisherId")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TotalChapter")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.HasIndex("PublisherId");

                    b.ToTable("Novels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2022, 6, 4, 20, 23, 9, 282, DateTimeKind.Local).AddTicks(7345),
                            Description = "- Từ Địa Cầu xuyên việt tới Dị giới đã thấy nhiều, nhưng Diệp Mặc của chúng ta lại từ Dị giới xuyên tới Địa Cầu.Điều này còn chưa phải là buồn bực nhất, để cho Diệp Mặc phát điên chính là cậu nhỏ của hắn bị liệt.",
                            Name = "Thiếu gia bị bỏ rơi",
                            PublisherId = 2,
                            Rating = 4.5,
                            Status = 1,
                            TotalChapter = 0
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2022, 6, 4, 20, 23, 9, 282, DateTimeKind.Local).AddTicks(7357),
                            Description = "Trong vũ trụ bao la, một mảnh tinh hệ sinh diệt, cũng bất quá là sát na pha tạp lưu quang.Ngắm nhìn bầu trời, luôn có loại thương cảm kết cục đã nhất định,trăm ngàn năm sau ngươi ta ở đâu ? Gia quốc, ánh lửa văn minh,Địa Cầu, đều chẳng qua là trong thâm không một hạt bụi.",
                            Name = "Già Thiên",
                            PublisherId = 3,
                            Rating = 4.5,
                            Status = 2,
                            TotalChapter = 0
                        });
                });

            modelBuilder.Entity("DocTruyen.DataAccess.Models.UserReadingLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ChapterIndex")
                        .HasColumnType("int");

                    b.Property<int>("NovelId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NovelId");

                    b.HasIndex("UserId");

                    b.ToTable("UserReadingLogs");
                });

            modelBuilder.Entity("DocTruyen.DataAccess.Models.ViewCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DayCount")
                        .HasColumnType("int");

                    b.Property<int>("MonthCount")
                        .HasColumnType("int");

                    b.Property<int>("NovelId")
                        .HasColumnType("int");

                    b.Property<int>("OverallCount")
                        .HasColumnType("int");

                    b.Property<int>("WeekCount")
                        .HasColumnType("int");

                    b.Property<int>("YearCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NovelId")
                        .IsUnique();

                    b.ToTable("ViewCounts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DocTruyen.DataAccess.Models.AppUseRole", b =>
                {
                    b.HasOne("DocTruyen.DataAccess.Models.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocTruyen.DataAccess.Models.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DocTruyen.DataAccess.Models.Chapter", b =>
                {
                    b.HasOne("DocTruyen.DataAccess.Models.Novel", "Novel")
                        .WithMany("Chapters")
                        .HasForeignKey("NovelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocTruyen.DataAccess.Models.AppUser", "Publisher")
                        .WithMany("Chapters")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Novel");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("DocTruyen.DataAccess.Models.Comment", b =>
                {
                    b.HasOne("DocTruyen.DataAccess.Models.Comment", null)
                        .WithMany("Replies")
                        .HasForeignKey("CommentId");

                    b.HasOne("DocTruyen.DataAccess.Models.Novel", "Novel")
                        .WithMany("Comments")
                        .HasForeignKey("NovelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocTruyen.DataAccess.Models.AppUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Novel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DocTruyen.DataAccess.Models.Image", b =>
                {
                    b.HasOne("DocTruyen.DataAccess.Models.Novel", "Novel")
                        .WithMany("Images")
                        .HasForeignKey("NovelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Novel");
                });

            modelBuilder.Entity("DocTruyen.DataAccess.Models.Novel", b =>
                {
                    b.HasOne("DocTruyen.DataAccess.Models.Author", "Author")
                        .WithMany("Novels")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DocTruyen.DataAccess.Models.Category", "Category")
                        .WithOne("Novel")
                        .HasForeignKey("DocTruyen.DataAccess.Models.Novel", "CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DocTruyen.DataAccess.Models.AppUser", "Publisher")
                        .WithMany("Novels")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("DocTruyen.DataAccess.Models.UserReadingLog", b =>
                {
                    b.HasOne("DocTruyen.DataAccess.Models.Novel", "NovelReading")
                        .WithMany("UserReadingLogs")
                        .HasForeignKey("NovelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocTruyen.DataAccess.Models.AppUser", "User")
                        .WithMany("UserReadingLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NovelReading");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DocTruyen.DataAccess.Models.ViewCount", b =>
                {
                    b.HasOne("DocTruyen.DataAccess.Models.Novel", "Novel")
                        .WithOne("ViewCount")
                        .HasForeignKey("DocTruyen.DataAccess.Models.ViewCount", "NovelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Novel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("DocTruyen.DataAccess.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DocTruyen.DataAccess.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DocTruyen.DataAccess.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DocTruyen.DataAccess.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocTruyen.DataAccess.Models.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DocTruyen.DataAccess.Models.AppUser", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Comments");

                    b.Navigation("Novels");

                    b.Navigation("UserReadingLogs");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DocTruyen.DataAccess.Models.Author", b =>
                {
                    b.Navigation("Novels");
                });

            modelBuilder.Entity("DocTruyen.DataAccess.Models.Category", b =>
                {
                    b.Navigation("Novel");
                });

            modelBuilder.Entity("DocTruyen.DataAccess.Models.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("DocTruyen.DataAccess.Models.Novel", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("UserReadingLogs");

                    b.Navigation("ViewCount");
                });
#pragma warning restore 612, 618
        }
    }
}
